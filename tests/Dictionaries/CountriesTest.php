<?php

namespace Tests\Dictionaries;

use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\Attributes\Test;
use Statamic\Dictionaries\Countries;
use Statamic\Dictionaries\Item;
use Tests\TestCase;

class CountriesTest extends TestCase
{
    #[Test]
    public function it_gets_options()
    {
        $options = (new Countries)->options();

        $this->assertCount(250, $options);
        $this->assertEquals([
            'AFG' => 'ğŸ‡¦ğŸ‡« Afghanistan',
            'ALA' => 'ğŸ‡¦ğŸ‡½ Aland Islands',
            'ALB' => 'ğŸ‡¦ğŸ‡± Albania',
            'DZA' => 'ğŸ‡©ğŸ‡¿ Algeria',
            'ASM' => 'ğŸ‡¦ğŸ‡¸ American Samoa',
        ], array_slice($options, 0, 5));
    }

    #[Test]
    public function it_filters_options_by_region()
    {
        $options = (new Countries)->setConfig(['region' => 'oceania'])->options();

        $this->assertCount(27, $options);
        $this->assertEquals([
            'ASM' => 'ğŸ‡¦ğŸ‡¸ American Samoa',
            'AUS' => 'ğŸ‡¦ğŸ‡º Australia',
            'CXR' => 'ğŸ‡¨ğŸ‡½ Christmas Island',
            'CCK' => 'ğŸ‡¨ğŸ‡¨ Cocos (Keeling) Islands',
            'COK' => 'ğŸ‡¨ğŸ‡° Cook Islands',
        ], array_slice($options, 0, 5));
    }

    #[Test]
    #[DataProvider('searchProvider')]
    public function it_searches_options($query, $expected)
    {
        $this->assertEquals($expected, (new Countries)->options($query));
    }

    public static function searchProvider()
    {
        return [
            'au' => [
                'au',
                [
                    'AUS' => 'ğŸ‡¦ğŸ‡º Australia',
                    'AUT' => 'ğŸ‡¦ğŸ‡¹ Austria',
                    'GNB' => 'ğŸ‡¬ğŸ‡¼ Guinea-Bissau',
                    'MAC' => 'ğŸ‡²ğŸ‡´ Macau S.A.R.',
                    'MRT' => 'ğŸ‡²ğŸ‡· Mauritania',
                    'MUS' => 'ğŸ‡²ğŸ‡º Mauritius',
                    'NRU' => 'ğŸ‡³ğŸ‡· Nauru',
                    'PLW' => 'ğŸ‡µğŸ‡¼ Palau',
                    'SAU' => 'ğŸ‡¸ğŸ‡¦ Saudi Arabia',
                    'TKL' => 'ğŸ‡¹ğŸ‡° Tokelau',
                ],
            ],
            'us' => [
                'us',
                [
                    'AUS' => 'ğŸ‡¦ğŸ‡º Australia',
                    'AUT' => 'ğŸ‡¦ğŸ‡¹ Austria',
                    'BLR' => 'ğŸ‡§ğŸ‡¾ Belarus',
                    'BES' => 'ğŸ‡§ğŸ‡¶ Bonaire, Sint Eustatius and Saba',
                    'CYP' => 'ğŸ‡¨ğŸ‡¾ Cyprus',
                    'MUS' => 'ğŸ‡²ğŸ‡º Mauritius',
                    'RUS' => 'ğŸ‡·ğŸ‡º Russia',
                    'USA' => 'ğŸ‡ºğŸ‡¸ United States',
                    'VIR' => 'ğŸ‡»ğŸ‡® Virgin Islands (US)',
                ],
            ],
        ];
    }

    #[Test]
    public function it_gets_array_from_value()
    {
        $item = (new Countries)->get('AUS');
        $this->assertInstanceOf(Item::class, $item);
        $this->assertEquals([
            'name' => 'Australia',
            'iso3' => 'AUS',
            'iso2' => 'AU',
            'region' => 'Oceania',
            'subregion' => 'Australia and New Zealand',
            'emoji' => 'ğŸ‡¦ğŸ‡º',
        ], $item->data());
    }
}
