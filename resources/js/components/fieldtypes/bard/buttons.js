const availableButtons = () => [
    {
        name: 'h1',
        text: __('Heading 1'),
        command: (editor, args) => editor.chain().focus().toggleHeading(args).run(),
        activeName: 'heading',
        args: { level: 1 },
        svg: 'ui/h1',
    },
    {
        name: 'h2',
        text: __('Heading 2'),
        command: (editor, args) => editor.chain().focus().toggleHeading(args).run(),
        activeName: 'heading',
        args: { level: 2 },
        svg: 'ui/h2',
    },
    {
        name: 'h3',
        text: __('Heading 3'),
        command: (editor, args) => editor.chain().focus().toggleHeading(args).run(),
        activeName: 'heading',
        args: { level: 3 },
        svg: 'ui/h3',
    },
    {
        name: 'h4',
        text: __('Heading 4'),
        command: (editor, args) => editor.chain().focus().toggleHeading(args).run(),
        activeName: 'heading',
        args: { level: 4 },
        svg: 'ui/h4',
    },
    {
        name: 'h5',
        text: __('Heading 5'),
        command: (editor, args) => editor.chain().focus().toggleHeading(args).run(),
        activeName: 'heading',
        args: { level: 5 },
        svg: 'ui/h5',
    },
    {
        name: 'h6',
        text: __('Heading 6'),
        command: (editor, args) => editor.chain().focus().toggleHeading(args).run(),
        activeName: 'heading',
        args: { level: 6 },
        svg: 'ui/h6',
    },
    {
        name: 'bold',
        text: __('Bold'),
        command: (editor) => editor.chain().focus().toggleBold().run(),
        svg: 'ui/text-bold',
    },
    {
        name: 'italic',
        text: __('Italic'),
        command: (editor) => editor.chain().focus().toggleItalic().run(),
        svg: 'ui/text-italic',
    },
    {
        name: 'underline',
        text: __('Underline'),
        command: (editor) => editor.chain().focus().toggleUnderline().run(),
        svg: 'ui/text-underline',
    },
    {
        name: 'strikethrough',
        text: __('Strikethrough'),
        command: (editor) => editor.chain().focus().toggleStrike().run(),
        activeName: 'strike',
        svg: 'ui/text-strike-through',
    },
    {
        name: 'small',
        text: __('Small'),
        command: (editor) => editor.chain().focus().toggleSmall().run(),
        svg: 'ui/text-small',
    },
    {
        name: 'unorderedlist',
        text: __('Unordered List'),
        command: (editor) => editor.chain().focus().toggleBulletList().run(),
        activeName: 'bulletList',
        svg: 'ui/list-ul',
    },
    {
        name: 'orderedlist',
        text: __('Ordered List'),
        command: (editor) => editor.chain().focus().toggleOrderedList().run(),
        activeName: 'orderedList',
        svg: 'ui/list-ol',
    },
    {
        name: 'removeformat',
        text: __('Remove Formatting'),
        command: (editor) => editor.chain().focus().clearNodes().unsetAllMarks().run(),
        svg: 'ui/eraser',
    },
    {
        name: 'quote',
        text: __('Blockquote'),
        command: (editor) => editor.chain().focus().toggleBlockquote().run(),
        activeName: 'blockquote',
        svg: 'ui/quote',
    },
    {
        name: 'superscript',
        text: __('Superscript'),
        command: (editor) => editor.chain().focus().toggleSuperscript().run(),
        svg: 'ui/superscript',
    },
    {
        name: 'subscript',
        text: __('Subscript'),
        command: (editor) => editor.chain().focus().toggleSubscript().run(),
        svg: 'ui/subscript',
    },
    {
        name: 'anchor',
        text: __('Link'),
        command: (editor) => editor.commands.setLink(),
        activeName: 'link',
        svg: 'ui/insert-link',
        component: 'LinkToolbarButton',
    },
    {
        name: 'table',
        text: __('Table'),
        command: (editor, args) => editor.commands.insertTable(args),
        args: { rowsCount: 3, colsCount: 3, withHeaderRow: false },
        svg: 'ui/add-table',
    },
    {
        name: 'image',
        text: __('Image'),
        command: (editor) => editor.commands.insertImage(),
        args: { src: '' },
        svg: 'ui/insert-image',
        condition: (config) => config.container,
    },
    { name: 'code', text: __('Inline Code'), command: (editor) => editor.commands.toggleCode(), svg: 'ui/code-inline' },
    {
        name: 'codeblock',
        text: __('Code Block'),
        command: (editor) => editor.commands.toggleCodeBlock(),
        activeName: 'codeBlock',
        svg: 'ui/code-block',
    },
    {
        name: 'horizontalrule',
        text: __('Horizontal Rule'),
        command: (editor) => editor.commands.setHorizontalRule(),
        activeName: 'horizontalRule',
        svg: 'ui/hr',
    },
    {
        name: 'alignleft',
        text: __('Align Left'),
        command: (editor) => editor.chain().focus().setTextAlign('left').run(),
        svg: 'ui/paragraph-align-left',
    },
    {
        name: 'aligncenter',
        text: __('Align Center'),
        command: (editor) => editor.chain().focus().setTextAlign('center').run(),
        svg: 'ui/paragraph-align-center',
    },
    {
        name: 'alignright',
        text: __('Align Right'),
        command: (editor) => editor.chain().focus().setTextAlign('right').run(),
        svg: 'ui/paragraph-align-right',
    },
    {
        name: 'alignjustify',
        text: __('Align Justify'),
        command: (editor) => editor.chain().focus().setTextAlign('justify').run(),
        svg: 'ui/paragraph-align-justified',
    },
];

const addButtonHtml = (buttons) => {
    return buttons.map((button) => {
        return button;
    });
};

export { availableButtons, addButtonHtml };
